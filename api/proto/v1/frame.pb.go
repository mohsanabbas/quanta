// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.32.0
// source: v1/frame.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// -------- generic checkpoint token --------------------------------------
type KafkaOffset struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topic         string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Partition     int32                  `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	Offset        int64                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KafkaOffset) Reset() {
	*x = KafkaOffset{}
	mi := &file_v1_frame_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaOffset) ProtoMessage() {}

func (x *KafkaOffset) ProtoReflect() protoreflect.Message {
	mi := &file_v1_frame_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaOffset.ProtoReflect.Descriptor instead.
func (*KafkaOffset) Descriptor() ([]byte, []int) {
	return file_v1_frame_proto_rawDescGZIP(), []int{0}
}

func (x *KafkaOffset) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *KafkaOffset) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *KafkaOffset) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type SqsHandle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Queue         string                 `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	Handle        string                 `protobuf:"bytes,2,opt,name=handle,proto3" json:"handle,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SqsHandle) Reset() {
	*x = SqsHandle{}
	mi := &file_v1_frame_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SqsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqsHandle) ProtoMessage() {}

func (x *SqsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_v1_frame_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqsHandle.ProtoReflect.Descriptor instead.
func (*SqsHandle) Descriptor() ([]byte, []int) {
	return file_v1_frame_proto_rawDescGZIP(), []int{1}
}

func (x *SqsHandle) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *SqsHandle) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

type HttpAckID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpAckID) Reset() {
	*x = HttpAckID{}
	mi := &file_v1_frame_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpAckID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpAckID) ProtoMessage() {}

func (x *HttpAckID) ProtoReflect() protoreflect.Message {
	mi := &file_v1_frame_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpAckID.ProtoReflect.Descriptor instead.
func (*HttpAckID) Descriptor() ([]byte, []int) {
	return file_v1_frame_proto_rawDescGZIP(), []int{2}
}

func (x *HttpAckID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// if you add more sources, extend this oneof â€“ engine never parses it
type CheckpointToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Kind:
	//
	//	*CheckpointToken_Kafka
	//	*CheckpointToken_Sqs
	//	*CheckpointToken_Http
	//	*CheckpointToken_Raw
	Kind          isCheckpointToken_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckpointToken) Reset() {
	*x = CheckpointToken{}
	mi := &file_v1_frame_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckpointToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointToken) ProtoMessage() {}

func (x *CheckpointToken) ProtoReflect() protoreflect.Message {
	mi := &file_v1_frame_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointToken.ProtoReflect.Descriptor instead.
func (*CheckpointToken) Descriptor() ([]byte, []int) {
	return file_v1_frame_proto_rawDescGZIP(), []int{3}
}

func (x *CheckpointToken) GetKind() isCheckpointToken_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *CheckpointToken) GetKafka() *KafkaOffset {
	if x != nil {
		if x, ok := x.Kind.(*CheckpointToken_Kafka); ok {
			return x.Kafka
		}
	}
	return nil
}

func (x *CheckpointToken) GetSqs() *SqsHandle {
	if x != nil {
		if x, ok := x.Kind.(*CheckpointToken_Sqs); ok {
			return x.Sqs
		}
	}
	return nil
}

func (x *CheckpointToken) GetHttp() *HttpAckID {
	if x != nil {
		if x, ok := x.Kind.(*CheckpointToken_Http); ok {
			return x.Http
		}
	}
	return nil
}

func (x *CheckpointToken) GetRaw() []byte {
	if x != nil {
		if x, ok := x.Kind.(*CheckpointToken_Raw); ok {
			return x.Raw
		}
	}
	return nil
}

type isCheckpointToken_Kind interface {
	isCheckpointToken_Kind()
}

type CheckpointToken_Kafka struct {
	Kafka *KafkaOffset `protobuf:"bytes,1,opt,name=kafka,proto3,oneof"`
}

type CheckpointToken_Sqs struct {
	Sqs *SqsHandle `protobuf:"bytes,2,opt,name=sqs,proto3,oneof"`
}

type CheckpointToken_Http struct {
	Http *HttpAckID `protobuf:"bytes,3,opt,name=http,proto3,oneof"`
}

type CheckpointToken_Raw struct {
	Raw []byte `protobuf:"bytes,15,opt,name=raw,proto3,oneof"` // fallback
}

func (*CheckpointToken_Kafka) isCheckpointToken_Kind() {}

func (*CheckpointToken_Sqs) isCheckpointToken_Kind() {}

func (*CheckpointToken_Http) isCheckpointToken_Kind() {}

func (*CheckpointToken_Raw) isCheckpointToken_Kind() {}

// ------------------------------------------------------------------------
type Frame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Headers       map[string][]byte      `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Ts            *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=ts,proto3" json:"ts,omitempty"`
	Checkpoint    *CheckpointToken       `protobuf:"bytes,5,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Frame) Reset() {
	*x = Frame{}
	mi := &file_v1_frame_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frame) ProtoMessage() {}

func (x *Frame) ProtoReflect() protoreflect.Message {
	mi := &file_v1_frame_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frame.ProtoReflect.Descriptor instead.
func (*Frame) Descriptor() ([]byte, []int) {
	return file_v1_frame_proto_rawDescGZIP(), []int{4}
}

func (x *Frame) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Frame) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Frame) GetHeaders() map[string][]byte {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Frame) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Frame) GetCheckpoint() *CheckpointToken {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

var File_v1_frame_proto protoreflect.FileDescriptor

const file_v1_frame_proto_rawDesc = "" +
	"\n" +
	"\x0ev1/frame.proto\x12\tquanta.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"Y\n" +
	"\vKafkaOffset\x12\x14\n" +
	"\x05topic\x18\x01 \x01(\tR\x05topic\x12\x1c\n" +
	"\tpartition\x18\x02 \x01(\x05R\tpartition\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x03R\x06offset\"9\n" +
	"\tSqsHandle\x12\x14\n" +
	"\x05queue\x18\x01 \x01(\tR\x05queue\x12\x16\n" +
	"\x06handle\x18\x02 \x01(\tR\x06handle\"\x1b\n" +
	"\tHttpAckID\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"\xb3\x01\n" +
	"\x0fCheckpointToken\x12.\n" +
	"\x05kafka\x18\x01 \x01(\v2\x16.quanta.v1.KafkaOffsetH\x00R\x05kafka\x12(\n" +
	"\x03sqs\x18\x02 \x01(\v2\x14.quanta.v1.SqsHandleH\x00R\x03sqs\x12*\n" +
	"\x04http\x18\x03 \x01(\v2\x14.quanta.v1.HttpAckIDH\x00R\x04http\x12\x12\n" +
	"\x03raw\x18\x0f \x01(\fH\x00R\x03rawB\x06\n" +
	"\x04kind\"\x8c\x02\n" +
	"\x05Frame\x12\x10\n" +
	"\x03key\x18\x01 \x01(\fR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value\x127\n" +
	"\aheaders\x18\x03 \x03(\v2\x1d.quanta.v1.Frame.HeadersEntryR\aheaders\x12*\n" +
	"\x02ts\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x02ts\x12:\n" +
	"\n" +
	"checkpoint\x18\x05 \x01(\v2\x1a.quanta.v1.CheckpointTokenR\n" +
	"checkpoint\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01B\x18Z\x16quanta/api/proto/v1;pbb\x06proto3"

var (
	file_v1_frame_proto_rawDescOnce sync.Once
	file_v1_frame_proto_rawDescData []byte
)

func file_v1_frame_proto_rawDescGZIP() []byte {
	file_v1_frame_proto_rawDescOnce.Do(func() {
		file_v1_frame_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_frame_proto_rawDesc), len(file_v1_frame_proto_rawDesc)))
	})
	return file_v1_frame_proto_rawDescData
}

var file_v1_frame_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_v1_frame_proto_goTypes = []any{
	(*KafkaOffset)(nil),           // 0: quanta.v1.KafkaOffset
	(*SqsHandle)(nil),             // 1: quanta.v1.SqsHandle
	(*HttpAckID)(nil),             // 2: quanta.v1.HttpAckID
	(*CheckpointToken)(nil),       // 3: quanta.v1.CheckpointToken
	(*Frame)(nil),                 // 4: quanta.v1.Frame
	nil,                           // 5: quanta.v1.Frame.HeadersEntry
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_v1_frame_proto_depIdxs = []int32{
	0, // 0: quanta.v1.CheckpointToken.kafka:type_name -> quanta.v1.KafkaOffset
	1, // 1: quanta.v1.CheckpointToken.sqs:type_name -> quanta.v1.SqsHandle
	2, // 2: quanta.v1.CheckpointToken.http:type_name -> quanta.v1.HttpAckID
	5, // 3: quanta.v1.Frame.headers:type_name -> quanta.v1.Frame.HeadersEntry
	6, // 4: quanta.v1.Frame.ts:type_name -> google.protobuf.Timestamp
	3, // 5: quanta.v1.Frame.checkpoint:type_name -> quanta.v1.CheckpointToken
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_v1_frame_proto_init() }
func file_v1_frame_proto_init() {
	if File_v1_frame_proto != nil {
		return
	}
	file_v1_frame_proto_msgTypes[3].OneofWrappers = []any{
		(*CheckpointToken_Kafka)(nil),
		(*CheckpointToken_Sqs)(nil),
		(*CheckpointToken_Http)(nil),
		(*CheckpointToken_Raw)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_frame_proto_rawDesc), len(file_v1_frame_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_frame_proto_goTypes,
		DependencyIndexes: file_v1_frame_proto_depIdxs,
		MessageInfos:      file_v1_frame_proto_msgTypes,
	}.Build()
	File_v1_frame_proto = out.File
	file_v1_frame_proto_goTypes = nil
	file_v1_frame_proto_depIdxs = nil
}
